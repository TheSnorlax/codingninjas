# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def ithNode(head, i):
    #############################
    # PLEASE ADD YOUR CODE HERE #
    #############################
    count = 0
    if i == 0 or i > length(head):
        return None
    temp = head
    while temp is not None:
        if count == i:
            return temp
        temp = temp.next
        count +=1
    return None

def ll(arr):
    if len(arr)==0:
        return None
    head = Node(arr[0])
    last = head
    for data in arr[1:]:
        last.next = Node(data)
        last = last.next
    return head

def length(head):
    temp = head
    le = 0
    if temp is None:
        return le
    while temp is not None:
        le += 1
        temp = temp.next
    return le

# Main
# Read the link list elements including -1
arr=list(int(i) for i in input().strip().split(' '))
# Create a Linked list after removing -1 from list
l = ll(arr[:-1])
i = int(input())
node = ithNode(l, i)
if node:
    print(node.data)
